@{
    var otherUser = (string)(ViewData["OtherUser"] ?? "");
    var currentUser = User?.Identity?.Name ?? "";
    ViewData["Title"] = $"Чат с {otherUser}";
}



<div class="chat-container">
    <div class="chat-header">
        <h2>Диалог с @otherUser</h2>
        <div id="presence" class="presence">offline</div>
    </div>

    <ul id="messagesList" class="messages"></ul>

    <div class="chat-inputs">
        <button id="photoBtn" type="button" title="Send Photo">📷</button>
        <input type="file" id="fileInput" accept="image/*" style="display:none"/>
        <input type="text" id="messageInput" placeholder="Сообщение" />
        <button id="sendBtn" type="button">Отправить</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    const currentUser = "@currentUser";
    const otherUser = "@otherUser"

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .withAutomaticReconnect()
        .build();

    connection.onreconnecting(() => console.warn("Reconnecting..."));
    connection.onreconnected(() => console.warn("Reconnected"));
    connection.onclose(err => console.error("Closed:", err));

    const messagesList = document.getElementById("messagesList");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");
    const presence = document.getElementById("presence");
    const fileInput =document.getElementById("fileInput");
    const photoBtn = document.getElementById("photoBtn");

    function escapeHtml(s) {
        const div = document.createElement("div");
        div.innerText = s ?? "";
        return div.innerHTML;
    }

    function appendMessage(id, user, message, ts) {
        const li = document.createElement("li");
        li.classList.add("message", user === currentUser ? "from-me" : "from-others");
        if(id) li.dataset.id =id;
        const time = ts ? new Date(ts).toLocaleTimeString() : "";
        li.innerHTML = `
        <div class="bubble">
          <div class="text">${escapeHtml(message)}</div>
          <div class="meta">${escapeHtml(user)} · ${time}</div>
        </div>
        <div class="reactions"></div>
        <div class="react-bar">
          <button class="r" type="button" data-emoji="👍">👍</button>
          <button class="r" type="button" data-emoji="❤️">❤️</button>
          <button class="r" type="button" data-emoji="😂">😂</button>
          <button class="r" type="button" data-emoji="🔥">🔥</button>
        </div>`;
        messagesList.appendChild(li);
        messagesList.scrollTop = messagesList.scrollHeight;
    }
    function appendImage(user, url, caption, ts, id){
        const li = document.createElement("li");
        li.classList.add("message", user === currentUser ? "from-me" : "from-others");
        if(id) li.dataset.id = id;
        const time = ts ? new Date(ts).toLocaleTimeString() : "";
        li.innerHTML = `
        <div class="bubble">
            <a href="${imageUrl}" target="_blank" rel="noopener">
                <img src="${imageUrl}" alt="image" class="img-msg"/>
            </a>
            ${caption ? `<div class="text">${escapeHtml(caption)}</div>`: ""}
            <div class="meta">${escapeHtml(user)} - ${time}</div>
        </div>
        <div class="reactions"></div>
        <div class="react-bar">
          <button class="r" type="button" data-emoji="👍">👍</button>
          <button class="r" type="button" data-emoji="❤️">❤️</button>
          <button class="r" type="button" data-emoji="😂">😂</button>
          <button class="r" type="button" data-emoji="🔥">🔥</button>
        </div>
        `;
        messagesList.appendChild(li);
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    connection.on("ReceiveMessage", (id ,user, message, timestamp) => {
        appendMessage(id, user, message, timestamp);
    });

    connection.on("ReceiveImage", (id, user, url, caption, timestamp)=>{
        appendImage(user, url, caption, timestamp, id);
    }

    connection.on("PresenceChanged", (user, state) => {
        if (user === otherUser) {
            presence.textContent = state;
            presence.className = "presence " + state;
        }
    });

    connection.start()
        .then(() => {
            console.log("Connected, JoinDialoug:", otherUser);
            return connection.invoke("JoinDialoug", otherUser);
        })
        .then(() => console.log("JoinDialoug done"))
        .catch(err => console.error("Start/Join error:", err));

    async function sendMessage() {
        const text = messageInput.value.trim();
        if (!text) return;
        try {
            await connection.invoke("SendMessage", otherUser, text);
            // appendMessage(currentUser, text, new Date().toISOString());
            messageInput.value = "";
            messageInput.focus();
        } catch (err) {
            console.error("SendMessage error:", err);
        }
    }
    sendBtn.addEventListener("click", sendMessage);
    messageInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    window.addEventListener("beforeunload", () => {
        connection.invoke("LeaveDialoug", otherUser).catch(() => { });
    });

    // reactions //

    connection.on("ReactionUpdated",({messageId, emoji, count}) => {
        const li = messagesList.querySelector(`li.message[data-id="${messageId}"]`);
        if(!li) return;
        const reactions = li.querySelector(".reactions");
        let chip = reactions.querySelector(`.reaction-chip[data-emoji = ${emoji}]`);
        if(!chip)
        {
            chip = document.createElement("span");
            chip.className = "reaction-chip";
            chip.dataset.emoji = emoji;
            reactions.appendChild(chip);
        }
        if(count > 0){
            chip.textContent = `${emoji} ${count}`;
            chip.style.display = "inline-flex";

        }else{
            chip.remove();
        }
    })

    messagesList.addEventListener("click", (e) =>{
        const btn = e.target.closest(".r");
        if(!btn)return;
        const li = e.target.closest("li.message");
        const messageId = li?.dataset.id;
        if(!messageId) return;
        const emoji = btn.dataset.emoji;
        connection.invoke("ToggleReaction", otherUser, messageId, emoji)
            .catch(err => console.error("ToggleReaction error:", err));
    });

    photoBtn.addEventListener("click", () => fileInput.click());

    fileInput.addEventListener("change", async() => {
        const file = fileInput.files?.[0];
        if(!file) return;
        try{
            const fd = new FormData();
            fd.append("file",file);
            const res = await fetch("/chat/upload",{
                method:"POST",
                body:fd
            });
            
            if(!res.ok){
                 console.error("Upload Failed", await res.text());
                 return;
            };
            const{url} = await res.json();
            await connection.invoke("SendImage",otherUser,url,null);
        }
        catch(e){
            console.error("Upload error", e);

        }finally{
            fileInput.value = "";
        }
    }



</script>
<style>
    .chat-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 12px;
        background-color: #f8f9fa;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        font-family: Arial, sans-serif;
    }

    .chat-header {
        text-align: center;
        margin-bottom: 15px;
    }

    .presence {
        display: inline-block;
        margin-top: 6px;
        font-size: 12px;
        padding: 4px 8px;
        border-radius: 999px;
        background: #e5e7eb;
        color: #374151;
    }

        .presence.online {
            background: #d1fae5;
            color: #065f46;
        }

        .presence.offline {
            background: #fee2e2;
            color: #991b1b;
        }

    .messages {
        list-style: none;
        padding: 0;
        max-height: 400px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 0 0 15px 0;
    }

    .message {
        max-width: 70%;
        padding: 0;
        border-radius: 10px;
        position: relative;
    }

        .message.from-me {
            align-self: flex-end;
        }

        .message.from-others {
            align-self: flex-start;
        }

    .bubble {
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 10px;
    }

    .from-me .bubble {
        background: #d1e7dd;
    }

    .text {
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 14px;
    }

    .meta {
        margin-top: 4px;
        font-size: 11px;
        color: #6b7280;
        text-align: right;
    }

    .chat-inputs {
        display: flex;
        gap: 10px;
    }

        .chat-inputs input {
            flex: 1;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 14px;
        }

        .chat-inputs button {
            padding: 10px 15px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color .3s;
        }

            .chat-inputs button:hover {
                background-color: #0056b3;
            }

        .chat-inputs #photoBtn{
            padding: 10px 12px;
            border:1px solid #ccc;
            background: #fff;
            border-radius: 8px;
            cursor: pointer;
        }

            .chat-inputs #photoBtn:hover{
                background-color:#f3f4f6
            }

    img-msg{
        display:block;
        max-width:600px;
        max-height:400px;
        width:auto;
        height:auto;
        border-radius: 8px;
        border:1px solid #e5e7eb;
    }
</style>