@model FriendsModel
@{
    ViewData["Title"] = "Manage friends";
    var me = User?.Identity?.Name ?? "";
}
<div class="friends-page">
    <h2>@ViewData["Title"]</h2>

    <div class="friend-actions">
        <input class="friend-actions-input" id="addInput" type="text" placeholder="email of user" />
        <button id="addBtn" type="button">Add friend</button>
    </div>
    <div class="cols">
        <div class="col">
            <h3 class="col-title">My friends</h3>
            <ul id="friendsList" class="list"></ul>
        </div>
        <div class="col">
            <h3 class="col-title">incoming requests</h3>
            <ul id="incomingList" class="list"></ul>
        </div>
        <div class="col">
            <h3 class="col-title">Outgoing requests</h3>
            <ul id="outgoingList" class="list"></ul>
        </div>
    </div>
</div>
     
<style>
    .friend-page{
        display: flex;
        flex-direction: column;
        align-items:center;
    }
    .friend-actions{
        margin-bottom: 40px;
        padding: 10px 0;
        display:flex;
        flex-direction:column;
        width: 33%;
        margin: 0 auto;
    }
    .friend-actions-input{
        margin-bottom: 20px;
    }
    .col-title{
        margin-bottom: 10px;
        text-decoration:underline;
    }

    .cols{
        display: flex;
        justify-content:space-around;
        width: 100%;
        padding: 10px;
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    (async () => {
      const friendsList  = document.getElementById('friendsList');
      const incomingList = document.getElementById('incomingList');
      const outgoingList = document.getElementById('outgoingList');
      const toUserInput  = document.getElementById('addInput');
      const sendBtn      = document.getElementById('addBtn');

      async function loadFriends(){
        const res = await fetch('/friends/list');
        if(!res.ok){ console.error('GET /friends', res.status, await res.text()); return; }
        const { friends } = await res.json();
        friendsList.innerHTML = '';
        (friends || []).forEach(u => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';
          li.textContent = u;

          const btn = document.createElement('button');
          btn.className = 'btn btn-sm btn-outline-danger remove';
          btn.dataset.u = u;
          btn.textContent = 'Remove';
          li.appendChild(btn);

          friendsList.appendChild(li);
        });
      }

      async function loadRequests(){
        const res = await fetch('/friends/requests');
        if(!res.ok){ console.error('GET /friends/requests', res.status, await res.text()); return; }
        const { incoming, outgoing } = await res.json();

        incomingList.innerHTML = '';
        (incoming || []).forEach(u => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';
          li.textContent = u;

          const wrap = document.createElement('div');
          const a = document.createElement('button');
          a.className = 'btn btn-sm btn-success accept';
          a.dataset.u = u; a.textContent = 'Accept';
          const d = document.createElement('button');
          d.className = 'btn btn-sm btn-outline-secondary decline';
          d.dataset.u = u; d.textContent = 'Decline';
          wrap.appendChild(a); wrap.appendChild(d);

          li.appendChild(wrap);
          incomingList.appendChild(li);
        });

        outgoingList.innerHTML = '';
        (outgoing || []).forEach(u => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';
          li.textContent = u;

          const c = document.createElement('button');
          c.className = 'btn btn-sm btn-outline-danger cancel';
          c.dataset.u = u; c.textContent = 'Cancel';
          li.appendChild(c);

          outgoingList.appendChild(li);
        });
      }

      async function refreshAll(){ await Promise.all([loadFriends(), loadRequests()]); }

      // actions
      sendBtn.addEventListener('click', async () => {
          const toUserInput =  document.getElementById('addInput');
          if(!toUserInput){
              console.error('no toUser');
              return;
          }
        const to = toUserInput.value.trim();
        if(!to) return;
        const res = await fetch('/friends/request', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify((to ?? "").trim())
        });
        if(!res.ok) alert(await res.text());
        toUserInput.value = '';
        await refreshAll();
      });

      incomingList.addEventListener('click', async (e) => {
        const u = e.target?.dataset?.u; if(!u) return;
        if(e.target.classList.contains('accept')){
          await fetch('/friends/respond', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ fromUserName: u, accept: true })
          });
          await refreshAll();
        } else if(e.target.classList.contains('decline')){
          await fetch('/friends/respond', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ fromUserName: u, accept: false })
          });
          await refreshAll();
        }
      });

      outgoingList.addEventListener('click', async (e) => {
        const u = e.target?.dataset?.u; if(!u) return;
        if(e.target.classList.contains('cancel')){

          const res = await fetch('/friends/respond', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify((u ?? '').trim())
          });
          if(!res.ok) console.warn('cancel respond?', await res.text());
          await refreshAll();
        }
      });

      friendsList.addEventListener('click', async (e) => {
        const u = e.target?.dataset?.u; if(!u) return;
        if(e.target.classList.contains('remove')){
          if(!confirm(`Remove ${u} from friends `)) return;
          const r = await fetch('/friends/' + encodeURIComponent(u), { method:'DELETE' });
          if(!r.ok) alert(await r.text());
          await refreshAll();
        }
      });


      const connection = new signalR.HubConnectionBuilder()
        .withUrl('/chatHub').withAutomaticReconnect().build();

      connection.on('FriendRequestIncoming', async (_from) => { await refreshAll(); });
      connection.on('FriendRequestResult',   async (_who, _result) => { await refreshAll(); });
      connection.on('FriendListUpdated',     async () => { await refreshAll(); });

      connection.onreconnecting(err => console.warn('SR reconnecting', err));
      connection.onreconnected(() => refreshAll());
      connection.onclose(err => console.error('SR closed', err));

      await connection.start();
      await refreshAll();
    })();
</script>